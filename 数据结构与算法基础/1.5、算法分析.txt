
1.1、分析算法时间复杂度的基本方法
	--找出【频度最大的】那条语句作为基本语句（嵌套最深语句的频度）
	--计算基本语句的频度得到问题规模n的某个函数f(n)
	--取其数量级用符号 "O"表示

1.2、例子
	矩阵相乘：
		for(i=1;i<=n;i++)
			for(j=1;j<=n;j++)
				for(k=1;k<=n;k++){

				}
		n*n*n
		f(n) = n*n*n
		T(n) = O(n*n*n)

	分析一下程序的时间复杂度：
		i=1;
		while(i<=n)
			i=i*2

		思路：
			循环1次：i = 1 * 2 = 2,
			循环2次：i = 2 * 2 
			循环3次：i = 2*2*2
			循环X次：i = 2(x平方)

			设语句执行次数X次，循环条件
			i <= n, 2(x方) <= n, x <= ㏒2(N)
			得出：f(n) =  ㏒2(N)

			最终：T(n) = O(㏒2(N))